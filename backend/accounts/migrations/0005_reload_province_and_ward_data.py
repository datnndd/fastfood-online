# Generated by hand to reload province/ward data from danh mục xã phường
import json
from pathlib import Path

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.db import migrations, models, transaction


def reload_locations(apps, schema_editor):
    Province = apps.get_model("accounts", "Province")
    Ward = apps.get_model("accounts", "Ward")
    User = apps.get_model("accounts", "User")
    DeliveryAddress = apps.get_model("accounts", "DeliveryAddress")

    data_path = Path(settings.BASE_DIR) / "danhmucxaphuong.json"
    if not data_path.exists():
        raise ImproperlyConfigured(f"Không tìm thấy file dữ liệu địa lý tại {data_path}")

    with data_path.open(encoding="utf-8") as handle:
        locations = json.load(handle)

    with transaction.atomic():
        DeliveryAddress.objects.update(province=None, ward=None)
        User.objects.update(province=None, ward=None)
        Ward.objects.all().delete()
        Province.objects.all().delete()

        provinces = []
        for item in locations:
            code = str(item.get("matinhBNV", "")).zfill(2)
            name = (item.get("tentinhmoi") or "").strip()
            if not code or not name:
                continue
            provinces.append(Province(code=code, name=name))

        Province.objects.bulk_create(provinces)

        province_map = {province.code: province for province in Province.objects.all()}
        wards = []

        for item in locations:
            code = str(item.get("matinhBNV", "")).zfill(2)
            province = province_map.get(code)
            if province is None:
                continue

            for ward in item.get("phuongxa", []):
                ward_code = str(ward.get("maphuongxa", "")).strip()
                ward_name = (ward.get("tenphuongxa") or "").strip()
                if not ward_code or not ward_name:
                    continue
                wards.append(
                    Ward(
                        province=province,
                        code=ward_code,
                        name=ward_name,
                    )
                )

        Ward.objects.bulk_create(wards, batch_size=1000)


def noop(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0004_remove_district_and_update_locations"),
    ]

    operations = [
        migrations.RunPython(reload_locations, noop),
        migrations.AlterField(
            model_name="ward",
            name="province",
            field=models.ForeignKey(
                on_delete=models.CASCADE,
                related_name="wards",
                to="accounts.province",
            ),
        ),
    ]
